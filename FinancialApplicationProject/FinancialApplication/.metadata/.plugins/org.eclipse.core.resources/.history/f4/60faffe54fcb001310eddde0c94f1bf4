package edu.gatech.financialapplication;

import java.util.Calendar;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.DatePickerDialog;
import android.app.Dialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.DatePicker;
import android.widget.TextView;

/**
 * Activity file for report date activity. Code from:
 * http://www.caveofprogramming
 * .com/frontpage/articles/java-android-sonawane/android-date-picker/
 * 
 * @author Team 15
 */
public class ReportDateActivity extends Activity {

	private String username, accountNumberTemp, type;
	private int monthFrom, dayFrom, yearFrom;
	private String monthFromString, dayFromString;
	private int monthTo, dayTo, yearTo;
	private String monthToString, dayToString;

	private TextView startDateText;
	private TextView endDateText;

	static final int DATE_DIALOG_START = 000;
	static final int DATE_DIALOG_END = 999;

	private Calendar c;

	@Override
	protected void onCreate(Bundle savedInstanceStt) {
		super.onCreate(savedInstanceStt);
		setContentView(R.layout.activity_report_date);

		accountNumberTemp = getIntent().getStringExtra("accountNumber");
		username = getIntent().getStringExtra("username");
		type = getIntent().getStringExtra("type");

		setCurrentDateOnView();
		addListenerOnButton();
	}

	public void setCurrentDateOnView() {
		startDateText = (TextView) findViewById(R.id.startDate);
		endDateText = (TextView) findViewById(R.id.endDate);

		c = Calendar.getInstance();
		yearFrom = c.get(Calendar.YEAR);
		monthFrom = c.get(Calendar.MONTH);
		dayFrom = c.get(Calendar.DAY_OF_MONTH);

		monthFromString = fixMonth(monthFrom);
		dayFromString = fixDay(dayFrom);

		yearTo = c.get(Calendar.YEAR);
		monthTo = c.get(Calendar.MONTH);
		dayTo = c.get(Calendar.DAY_OF_MONTH);

		monthToString = fixMonth(monthTo);
		dayToString = fixDay(dayTo);

		startDateText.setText(new StringBuilder().append(monthFromString)
				.append("-").append(dayFromString).append("-").append(yearFrom)
				.append(" "));
		endDateText.setText(new StringBuilder().append(monthToString)
				.append("-").append(dayToString).append("-").append(yearTo)
				.append(" "));
	}

	// fancy schmancy listeners for the textviews.
	public void addListenerOnButton() {
		startDateText = (TextView) findViewById(R.id.startDate);
		startDateText.setOnClickListener(new OnClickListener() {
			@SuppressWarnings("deprecation")
			@Override
			public void onClick(View v) {
				showDialog(DATE_DIALOG_START);
			}
		});

		endDateText = (TextView) findViewById(R.id.endDate);
		endDateText.setOnClickListener(new OnClickListener() {
			@SuppressWarnings("deprecation")
			@Override
			public void onClick(View v) {
				showDialog(DATE_DIALOG_END);
			}
		});
	}

	@Override
	protected Dialog onCreateDialog(int id) {
		if (id == DATE_DIALOG_START) {
			return new DatePickerDialog(this, startDateListener, yearFrom,
					monthFrom, dayFrom);
		} else if (id == DATE_DIALOG_END) {
			return new DatePickerDialog(this, endDateListener, yearTo, monthTo,
					dayTo);
		}
		return null;
	}

	private DatePickerDialog.OnDateSetListener startDateListener = new DatePickerDialog.OnDateSetListener() {
		public void onDateSet(DatePicker view, int selectedYear,
				int selectedMonth, int selectedDay) {

			monthFromString = fixMonth(selectedMonth);
			dayFromString = fixDay(selectedDay);
			yearFrom = selectedYear;

			startDateText.setText(new StringBuilder().append(monthFromString)
					.append("-").append(dayFromString).append("-")
					.append(yearFrom).append(" "));
		}
	};

	private DatePickerDialog.OnDateSetListener endDateListener = new DatePickerDialog.OnDateSetListener() {
		public void onDateSet(DatePicker view, int selectedYear,
				int selectedMonth, int selectedDay) {

			monthToString = fixMonth(selectedMonth);
			dayToString = fixDay(selectedDay);
			yearTo = selectedYear;

			endDateText.setText(new StringBuilder().append(monthToString)
					.append("-").append(dayToString).append("-").append(yearTo)
					.append(" "));
		}
	};

	public void onDateClick(View view) {
		Intent intent = null;
		if ("spendingCategory".equals(type)) {
			intent = new Intent(this, ConsumerSpendingActivity.class);
		} else if ("incomeSource".equals(type)) {
			intent = new Intent(this, IncomeSourceActivity.class);
		} else if ("cashFlow".equals(type)) {
			intent = new Intent(this, CashFlowActivity.class);
		} else if ("transactionHistory".equals(type)) {
			intent = new Intent(this, TransactionHistoryActivity.class);
		}
		
		String finalStart = monthFromString + "" + dayFromString + ""
				+ yearFrom;
		String finalEnd = monthToString + "" + dayToString + "" + yearTo;

		if (checkDate(finalStart, finalEnd)) {
			Bundle bundle = new Bundle();
			bundle.putString("accountNumber", accountNumberTemp);
			bundle.putString("username", username);
			bundle.putString("finalStart", finalStart);
			bundle.putString("finalEnd", finalEnd);
			intent.putExtras(bundle);
			startActivity(intent);
		}
	}

	private boolean checkDate(String start, String end) {
		boolean result = false;

		if (start.compareTo(end) > 0) {
			new AlertDialog.Builder(this)
					.setTitle("Date input error.")
					.setMessage("Sorry, end date can't be before start date.")
					.setPositiveButton(android.R.string.ok,
							new DialogInterface.OnClickListener() {
								public void onClick(DialogInterface dialog,
										int which) {
									// Empty
								}
							}).show();
		} else {
			result = true;
		}
		return result;
	}

	private String fixMonth(int monthInput) {
		String month = monthInput + "";
		if ((monthInput + 1) < 10) {
			month = "0" + (monthInput + 1);
		}

		return month;
	}

	private String fixDay(int dayInput) {
		String day = dayInput + "";
		if (dayInput < 10) {
			day = "0" + dayInput;
		}

		return day;
	}

	public void onBackClick(View view) {
		finish();
	}
}
